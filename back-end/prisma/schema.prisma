// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(cuid())
  username String @unique
  fullName String 
  password String
  gender  Gender
  profilePic String

  profileDescription String @default("My description")


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //track the conversations in which this user belongs
  conversationsIds String[] 

  conversations Conversation[]
  messages Message[]
  publications Publication[]
  comments Comment[]

  follows Follows[] @relation("followers")
  following Follows[] @relation("following")

}

model Follows{
  id String @id @default(cuid())
  follower User @relation("following", fields:[followerId], references: [id])
  followerId String

  following User @relation("followers", fields:[followingId], references: [id])
  followingId String

  @@unique([followerId, followingId])
}


model Conversation{
  id String @id @default(cuid())

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  participantIds String[]
  participants User[]
  messageIds String[]
  messages Message[]
}

model Message{
  id String @id @default(cuid())
  content String

  conversationId String
  conversation Conversation @relation(fields: [conversationId], references:[id])

  senderId String
  sender User @relation(fields: [senderId], references:[id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Publication{
  id String @id @default(cuid())
  content String

  authorId String
  author User @relation(fields:[authorId], references: [id])

  comments Comment[]

  createdAt DateTime @default(now())
}

model Comment{
  id String @id @default(cuid())
  content String

  publicationId String
  publication Publication @relation(fields:[publicationId], references:[id])

  authorId String
  author User @relation(fields:[authorId], references:[id])

  createdAt DateTime @default(now())
}


enum Gender{
  male
  female
  other
}
